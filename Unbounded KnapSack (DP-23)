https://www.naukri.com/code360/problems/unbounded-knapsack_1215029?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf

//Recursion
  public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.
       int res= Helper(n,w,profit,weight,0,0,0);
       return res;
}
public static int Helper(int n,int k,int[] profit,int[] weight,int sum,int i,int proSum){
            if(sum==k){
                return proSum;
            }
            if(i>=weight.length || sum>k){
                    return 0;
            }
            int a=Helper(n,k,profit-weight[i],weight,sum+weight[i],i,proSum+profit[i]);
            int b=Helper(n,k,profit,weight,sum,i+1,proSum);
              return Math.max(a,b);
}
}

//Memoization

  import java.util.*;
  public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        int[][] mem=new int[n][w+1];
        for(int i=0;i<n;i++) 
        Arrays.fill(mem[i],-1);
        int res= Helper(n-1,w,profit,weight,mem);
       return res;
 }
 public static int Helper(int n,int k,int[] profit,int[] weight,int[][] mem){
         
            if(n<0 || k<0) return 0;
            if(mem[n][k]!=-1) return mem[n][k];
            int a=0;
            if(k>=weight[n])
            a=profit[n]+Helper(n,k-weight[n],profit,weight,mem);
            int b=Helper(n-1,k,profit,weight,mem);
             return mem[n][k]=Math.max(a,b);

    }
}
