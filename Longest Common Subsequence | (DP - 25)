https://leetcode.com/problems/longest-common-subsequence/

//Recursion 

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
      
        List<String> list=new ArrayList<>();
       Helper1(text1,0,list,"");
       int res=Helper2(text2,list,0,"");
       return res;
    }

    public void Helper1(String text,int i,List<String> list,String str){
        if(i==text.length()){
            list.add(str);
            return;
        }

        Helper1(text,i+1,list,str+text.charAt(i));
        Helper1(text,i+1,list,str);

        return;
    }

    public int Helper2(String text,List<String> list,int i,String str){
        if(i==text.length()){
            if(list.contains(str)){
                return str.length();
            }
            return 0;
        }

        if(i>text.length()){
            return 0;
        }

        int a=Helper2(text,list,i+1,str+text.charAt(i));
        int b=Helper2(text,list,i+1,str);

        return Math.max(a,b);
    }
}

//Optimised Recursion
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        return Helper(text1,text2,text1.length()-1,text2.length()-1);
    }

    public int Helper(String text1,String text2,int m,int n){
        if(m<0 || n<0) return 0;

        if(text1.charAt(m)==text2.charAt(n)) return 1+Helper(text1,text2,m-1,n-1);

        int exclude1=  Helper(text1,text2,m,n-1);
        int exclude2= Helper(text1,text2,m-1,n);

        return Math.max(exclude1,exclude2);
    }
}
