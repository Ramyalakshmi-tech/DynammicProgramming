https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/

class Solution {
    public int maxProfit(int[] prices) {
          return Helper(prices, 0, false); // Start recursion from day 0 without holdin   any stock
    }

    public int Helper(int[] prices, int day, boolean hasStock) {
        // Base case: If we reach the end of the array
        if (day >= prices.length) {
            return 0;
        }

        int profit = 0;
        if (hasStock) { 
            // Case 1: Sell the stock or skip
            int sell = prices[day] + Helper(prices, day + 2, false); // Sell stock
            int skip = Helper(prices, day + 1, true);               // Skip selling
            profit = Math.max(sell, skip);
        } 
        else {
            // Case 2: Buy the stock or skip
            int buy = -prices[day] + Helper(prices, day + 1, true); // Buy stock
            int skip = Helper(prices, day + 1, false);             // Skip buying
            profit = Math.max(buy, skip);
        }

        return profit;
    }
}
