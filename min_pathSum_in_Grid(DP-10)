https://leetcode.com/problems/minimum-path-sum/description/

//Memoization

class Solution {
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] mem=new int[m][n];
        for(int i=0;i<m;i++){
            Arrays.fill(mem[i],-1);
        }
        if(m==1 && n==1){
            return grid[0][0];
        }
      int ans=  minPathSumRecur(grid,m,n,0,0,mem);
        return ans;
    }

    public int minPathSumRecur(int[][] grid,int m,int n,int i,int j,int[][] mem){
        if(i==m-1 && j==n-1){
            return grid[i][j];
        }
        
        if(i>=m || j>=n){
            return Integer.MAX_VALUE;
        }
        if(mem[i][j]!=-1){
            return mem[i][j];
        }
        int DownSum=minPathSumRecur(grid,m,n,i+1,j,mem);
        int rightSum=minPathSumRecur(grid,m,n,i,j+1,mem);
        
        mem[i][j]=grid[i][j]+Math.min(DownSum,rightSum);
        return mem[i][j];
    }
}
