https://leetcode.com/problems/coin-change-ii/description/

//Recursion 
class Solution {
    public int change(int amount, int[] coins) {
        int n=coins.length;
       return Helper(amount,coins,n-1);
       
    }

    public int Helper(int k,int[] coins,int n){
        if(k==0)
            return 1;

        if(k<0 || n<0) return 0;

       int a= Helper(k-coins[n],coins,n);
       int b= Helper(k,coins,n-1);

       return a+b;
    }
}

//Memoization

class Solution {
    public int change(int amount, int[] coins) {
        int n=coins.length;
        int[][] mem=new int[n][amount+1];
        for(int i=0;i<n;i++) Arrays.fill(mem[i],-1);
       return Helper(amount,coins,n-1,mem);
       
    }

    public int Helper(int k,int[] coins,int n,int[][] mem){
        if(k==0)
            return 1;

        if(k<0 || n<0) return 0;
        if(mem[n][k]!=-1) return mem[n][k];

       int a= Helper(k-coins[n],coins,n,mem);
       int b= Helper(k,coins,n-1,mem);

       return mem[n][k]=a+b;
    }
}
